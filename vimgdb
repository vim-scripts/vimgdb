#!perl

use warnings;
use strict;
use POSIX qw(tmpnam);

my $VIM_EXE = 'vim';
my $GEN_LOG = 0;

my $fname  = "sureshkumar";
my $lname  = "manimuthu";
my $domine = "gmail";
my $suffix = "com";
my $ERROR_FILE = "vimgdb.err";

print "\nvimgdb 0.1 (send your feedbacks to $fname.$lname\@$domine.$suffix)\n\n";

if(@ARGV < 1)
{
	print STDERR "Must specify the executable file name\n";
	exit -1;
}

my $in_fifo = tmpnam(); # name of communication pipe for input
my $out_fifo = tmpnam(); # name of communication pipe for output
my $gdb_task;
my $msg_task;

print "Creating FIFOs $in_fifo $out_fifo\n";

# create fifo - some systems have mkfifo and some mknod
if(system("mkfifo -m 600 $in_fifo") && system("mknod -m 600 $in_fifo p"))
{
	die "Unable to create $in_fifo\n";
}

if(system("mkfifo -m 600 $out_fifo") && system("mknod -m 600 $out_fifo p"))
{
	die "Unable to create $out_fifo\n";
}

pipe(FROM_VIM, TO_GDB);  # setup pipes for communication
pipe(FROM_GDB, TO_VIM);

print "Staring GDB\n";

unless(defined($gdb_task = fork()))
{
	die("Unable to fork");
}

if($gdb_task == 0)
{
	#print "GDB Task\n";
	close FROM_VIM;
	close TO_VIM;

	open(STDOUT, ">&TO_GDB")     || die "Can't redirect stdout";
	open(STDERR, ">$ERROR_FILE") || die "Can't redirect stdout";
    open(STDIN, "<&FROM_GDB")    || die "Can't redirect stdin";

	select(TO_GDB);    $| = 1; # make unbuffered
	select(STDOUT);    $| = 1; # make unbuffered

	exec("gdb", "-f", "-quiet", @ARGV);

	die("GDB Init Error !!!");
}

print "Staring Message Task\n";

unless(defined($msg_task = fork()))
{
	die("Unable to fork");
}

if($msg_task == 0)
{
	# print "MSG Task\n";
	close FROM_GDB;
	close TO_GDB;
	my $first_time = 1;
	my $line;

	if($GEN_LOG)
	{
		open(LOGFILE, ">", "vimgdb.log") || die("Unable to open log file");
		select(LOGFILE); $| = 1;
	}

	select(TO_VIM);    $| = 1; # make unbuffered

    print TO_VIM "set prompt (gdb)\\n\n";

	while(1)
	{
		if(!$first_time)
		{
			unless(open(OUT,">", $out_fifo))
			{
				die "opening $out_fifo failed";
			}
			select(OUT);    $| = 1;
		}

		while(<FROM_VIM>)
		{
			chomp();
			if($GEN_LOG)
			{
				print LOGFILE ">> ", $_, "\n";
			}
			if(!$first_time)
			{
				print OUT $_, "\n";
			}
			if(/^\(gdb\)/ || /^The program is running\.  Exit anyway/)
			{
				last;
			}
		}
		if(!$first_time)
		{
			close(OUT);
		}

		unless(open(IN,"<", $in_fifo))
		{
			die "opening $in_fifo failed";
		}

		$line = <IN>;
		chomp($line);
		if($GEN_LOG)
		{
			print LOGFILE "<<", $line, "\n";
		}
		print TO_VIM $line, "\n";
		$first_time = 0;
	}

	die "Exiting msg task";
}

print "Staring VIM\n";

system($VIM_EXE . ' -c "runtime misc/vimgdb.vim" -c \'call Gdb_interf_init("' . $in_fifo . '","'. $out_fifo .'")\'');

print TO_VIM "quit\n";

kill(15, $gdb_task, $msg_task);

while(wait() != -1)
{
}

if(open(OUT, "<", $ERROR_FILE))
{
	while(<OUT>)
	{
		print;
	}
}

print "Deleting FIFOs\n";

unlink ($in_fifo);
unlink ($out_fifo);
unlink ($ERROR_FILE);
